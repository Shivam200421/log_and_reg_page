/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.40
 * Generated at: 2025-07-10 04:45:14 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.sql.*;

public final class login_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/db.jsp", Long.valueOf(1752122706822L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(6);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');

    String dbURL = "jdbc:mysql://localhost:3306/javaProject";
    String dbUser = "root";
    String dbPass = "shivam";

    Connection conn = null;
    try {
        Class.forName("com.mysql.cj.jdbc.Driver");
        conn = DriverManager.getConnection(dbURL, dbUser, dbPass);
    } catch (Exception e) {
        out.println("Database connection failed: " + e.getMessage());
    }

      out.write('\n');
      out.write('\n');
      out.write('\n');

    String message = "";

    if ("POST".equalsIgnoreCase(request.getMethod())) {
        String username = request.getParameter("username");
        String password = request.getParameter("password");

        PreparedStatement stmt = conn.prepareStatement("SELECT * FROM userdb WHERE username=? AND password=?");
        stmt.setString(1, username);
        stmt.setString(2, password);
        ResultSet rs = stmt.executeQuery();

        if (rs.next()) {
            session.setAttribute("username", username);
            response.sendRedirect("welcome.jsp");
            return;
        } else {
            message = "Invalid login!";
        }
    }

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("    <title>Login</title>\n");
      out.write("    <style>\n");
      out.write("        body {\n");
      out.write("            background-image: url('https://example.com/background.jpg');\n");
      out.write("            background-size: cover;\n");
      out.write("            background-position: center;\n");
      out.write("            font-family: Arial, sans-serif;\n");
      out.write("            text-align: center;\n");
      out.write("            padding-top: 100px;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .login-container {\n");
      out.write("            background-color: rgba(255, 0, 0, 0.9); /* red with 90% opacity */\n");
      out.write("    padding: 30px;\n");
      out.write("    border-radius: 10px;\n");
      out.write("    display: inline-block;\n");
      out.write("    box-shadow: 0 0 10px rgba(0,0,0,0.2);\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        input[type=\"text\"], input[type=\"password\"] {\n");
      out.write("            margin: 10px 0;\n");
      out.write("            padding: 8px;\n");
      out.write("            width: 200px;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        input[type=\"submit\"] {\n");
      out.write("            padding: 8px 20px;\n");
      out.write("            margin-top: 10px;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        img.logo {\n");
      out.write("            width: 100px;\n");
      out.write("            margin-bottom: 20px;\n");
      out.write("        }\n");
      out.write("    <!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("    <title>Login</title>\n");
      out.write("    <style>\n");
      out.write("        body {\n");
      out.write("            background-image: url('https://example.com/background.jpg'); /* Replace with your image */\n");
      out.write("            background-size: cover;\n");
      out.write("            background-position: center;\n");
      out.write("            font-family: Arial, sans-serif;\n");
      out.write("            text-align: center;\n");
      out.write("            padding-top: 100px;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .login-container {\n");
      out.write("            background-color: rgba(255, 0, 0, 0.9); /* Red background */\n");
      out.write("            padding: 30px;\n");
      out.write("            border-radius: 10px;\n");
      out.write("            display: inline-block;\n");
      out.write("            box-shadow: 0 0 10px rgba(0,0,0,0.2);\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        input[type=\"text\"], input[type=\"password\"] {\n");
      out.write("            margin: 10px 0;\n");
      out.write("            padding: 8px;\n");
      out.write("            width: 200px;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        input[type=\"submit\"] {\n");
      out.write("            padding: 8px 20px;\n");
      out.write("            margin-top: 10px;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        img.logo {\n");
      out.write("            width: 100px;\n");
      out.write("            margin-bottom: 20px;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        /* Glitch effect */\n");
      out.write("        .glitch {\n");
      out.write("            position: relative;\n");
      out.write("            font-weight: bold;\n");
      out.write("            font-size: 18px;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .glitch::before,\n");
      out.write("        .glitch::after {\n");
      out.write("            content: attr(data-text);\n");
      out.write("            position: absolute;\n");
      out.write("            left: 0;\n");
      out.write("            top: 0;\n");
      out.write("            width: 100%;\n");
      out.write("            background: inherit;\n");
      out.write("            overflow: hidden;\n");
      out.write("            clip: rect(0, 900px, 0, 0);\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .glitch::before {\n");
      out.write("            animation: glitchTop 1s infinite linear alternate-reverse;\n");
      out.write("            color: #00ffea;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .glitch::after {\n");
      out.write("            animation: glitchBottom 1s infinite linear alternate-reverse;\n");
      out.write("            color: #ff005a;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        @keyframes glitchTop {\n");
      out.write("            0% { clip: rect(0, 9999px, 0, 0); transform: translate(0, 0); }\n");
      out.write("            10% { clip: rect(0, 9999px, 15px, 0); transform: translate(-5px, -5px); }\n");
      out.write("            20% { clip: rect(0, 9999px, 10px, 0); transform: translate(5px, -1px); }\n");
      out.write("            30% { clip: rect(0, 9999px, 5px, 0); transform: translate(-3px, 2px); }\n");
      out.write("            100% { clip: rect(0, 9999px, 0, 0); transform: translate(0, 0); }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        @keyframes glitchBottom {\n");
      out.write("            0% { clip: rect(0, 9999px, 0, 0); transform: translate(0, 0); }\n");
      out.write("            10% { clip: rect(15px, 9999px, 100px, 0); transform: translate(3px, 2px); }\n");
      out.write("            20% { clip: rect(10px, 9999px, 80px, 0); transform: translate(-4px, 0); }\n");
      out.write("            30% { clip: rect(5px, 9999px, 90px, 0); transform: translate(2px, -3px); }\n");
      out.write("            100% { clip: rect(0, 9999px, 0, 0); transform: translate(0, 0); }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .label-username {\n");
      out.write("            color: #00ffff; /* Cyan */\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .label-password {\n");
      out.write("            color: #ffcc00; /* Yellow/Orange */\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .glitch-title {\n");
      out.write("            font-size: 32px;\n");
      out.write("        }\n");
      out.write("    </style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("    <!-- Logo image (optional) -->\n");
      out.write("    <img class=\"logo\" src=\"https://example.com/logo.png\" alt=\"Logo\" /> <!-- Replace with your logo -->\n");
      out.write("\n");
      out.write("    <div class=\"login-container\">\n");
      out.write("        <h2 class=\"glitch glitch-title\" data-text=\"Login\">Login</h2>\n");
      out.write("\n");
      out.write("        <form method=\"post\">\n");
      out.write("            <label class=\"glitch label-username\" data-text=\"Username:\">Username:</label><br/>\n");
      out.write("            <input type=\"text\" name=\"username\" required /><br/>\n");
      out.write("\n");
      out.write("            <label class=\"glitch label-password\" data-text=\"Password:\">Password:</label><br/>\n");
      out.write("            <input type=\"password\" name=\"password\" required /><br/>\n");
      out.write("\n");
      out.write("            <input type=\"submit\" value=\"Login\" />\n");
      out.write("        </form>\n");
      out.write("\n");
      out.write("        <p>");
      out.print( message );
      out.write("</p>\n");
      out.write("        <a href=\"register.jsp\">Don't have an account? Register</a>\n");
      out.write("    </div>\n");
      out.write("</body>\n");
      out.write("</html>\n");
      out.write("</html>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
